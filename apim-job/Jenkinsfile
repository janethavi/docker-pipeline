def build_jobs = [:]

pipeline {
    agent any
    environment {
        PATH = "/usr/local/wum/bin:$PATH"
    }
    stages {
        stage('Download_product_packs') {
            steps{
                withCredentials([usernamePassword(credentialsId: 'WUM', passwordVariable: 'WUM_PASSWORD', usernameVariable: 'WUM_USERNAME')]) {
                    sh 'wum init -u $WUM_USERNAME -p $WUM_PASSWORD'
                    sh '/home/janeth/Documents/Project/docker-pipeline/update-pack/wum_update.sh $wso2_product $wso2_product_version'
                }
            }
        }
        stage('Build and Push') {
            steps{
                script {
                    build_script = load '/home/janeth/Documents/Project/docker-pipeline/apim-job/build-image.groovy'
                    build_script.get_product_docker_home(wso2_product)
                    build_script.get_docker_release_version(wso2_product, wso2_product_version)
                    os_platforms = [alpine: '3.10', ubuntu: '18.04', centos: '7']
                    for (os_platform_name in  os_platforms.keySet()) {
                        for (product_profile_docker_home in product_profile_docker_homes) {
                            build_jobs["${os_platform_name}-${product_profile_docker_home}"] = create_build_job(wso2_product, wso2_product_version, os_platform_name, product_profile_docker_home)
                        }
                    }
                    parallel build_jobs
                }
            }
        }
    }
}

def create_build_job(wso2_product, wso2_product_version, os_platform_name, product_profile_docker_home) {
    return {
        stage("${os_platform_name}-${product_profile_docker_home}"){
            stage("Build ${os_platform_name}-${product_profile_docker_home}") {
                def image_map = build_script.image_build_handler(wso2_product, wso2_product_version, os_platform_name, product_profile_docker_home)
                stage("Push ${os_platform_name}-${product_profile_docker_home}") {
                    build_script.push_images(image_map)
                }
            }
        }
    }
}
